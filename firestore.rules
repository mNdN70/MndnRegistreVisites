/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a basic level of security for a visit logging application.
 *
 * Core Philosophy:
 *  - Public read access to `persons_to_visit` collection.
 *  - Owner-only access to `visits` collection. The "owner" is implicitly defined as the user ID.
 *  - Rules are designed for prototyping and rapid iteration, favoring simple authorization over strict schema validation.
 *
 * Data Structure:
 *  - /persons_to_visit/{personToVisitId}: Stores information about people who can be visited.
 *  - /visits/{visitId}: Stores visit records.
 *
 * Key Security Decisions:
 *  - `persons_to_visit` is publicly readable to simplify the application's initial data access. Writes are disallowed.
 *  - `visits` collection uses an ownership model.
 *  - No user listing is explicitly denied, but also not explicitly enabled, as the base case in Firestore is DENY ALL.
 *
 * Denormalization for Authorization:
 *  - The `Visit` entity does NOT contain an explicit owner field (`ownerId` or `authorId`). To enforce owner-only writes, we rely on the implicit owner being the document ID.
 *
 * Structural Segregation:
 *  - No structural segregation is used. All data is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to person to visit information. Write access is denied.
     * @path /persons_to_visit/{personToVisitId}
     * @allow (get, list): Any user can read the data.
     * @deny (create, update, delete): No one can modify or create person to visit entries through direct Firestore writes.
     * @principle Allows public read access for simplicity.
     */
    match /persons_to_visit/{personToVisitId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces owner-only access to visit records.
     * @path /visits/{visitId}
     * @allow (create): Allows a user to create a visit record if the visitId matches their UID.
     * @allow (get, list): Allows a user to read any visit record.
     * @allow (update, delete): Allows a user to update or delete their own visit record.
     * @deny (create): Denies creation if the visitId does not match the user's UID.
     * @deny (update, delete): Denies update or delete if the user does not own the visit record or the record does not exist.
     * @principle Enforces document ownership for writes.
     */
    match /visits/{visitId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.auth.uid == visitId;
      allow update: if isSignedIn() && isOwner(visitId);
      allow delete: if isSignedIn() && isOwner(visitId);
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(visitId) {
        return request.auth.uid == visitId;
    }

  }
}