/**
 * @file Overview
 * This ruleset enforces a basic security model for a visit logging application.
 *
 * Core Philosophy:
 * - Public Read, Owner Write: The `visits` and `persons_to_visit` collections are publicly readable, but only owners can create, update, or delete documents within them.
 *
 * Data Structure:
 * - `/persons_to_visit/{personToVisitId}`: Stores information about people who can be visited.
 * - `/visits/{visitId}`: Stores visit records.
 *
 * Key Security Decisions:
 * - Public read access for all collections.
 * - Strict ownership model for all write operations (create, update, delete).
 * - No special roles or admin privileges are defined.
 *
 * Data Denormalization:
 * - The data includes a denormalized 'active' field in the `Visit` entity to optimize queries for current visits.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access and owner-only write access to the `persons_to_visit` collection.
     * @path /persons_to_visit/{personToVisitId}
     * @allow get, list: Any user can read person to visit information.
     * @allow create: Only the document owner can create a new person to visit document. The `id` field must match the `personToVisitId` path parameter.
     * @allow update: Only the document owner can update an existing person to visit document.
     * @allow delete: Only the document owner can delete an existing person to visit document.
     * @deny create: Attempt to create a document where the `id` field does not match the `personToVisitId` path parameter.
     * @deny update: Attempt to update a document by a user who is not the owner.
     * @deny delete: Attempt to delete a document by a user who is not the owner or if the document does not exist.
     * @principle Enforces document ownership for writes, public read access.
     */
    match /persons_to_visit/{personToVisitId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && resource.data.id == personToVisitId;
      allow delete: if request.auth != null && resource.data.id == personToVisitId && resource != null;
    }

    /**
     * @description Grants public read access and owner-only write access to the `visits` collection.
     * @path /visits/{visitId}
     * @allow get, list: Any user can read visit information.
     * @allow create: Only the document owner can create a new visit document. The `id` field must match the `visitId` path parameter.
     * @allow update: Only the document owner can update an existing visit document.
     * @allow delete: Only the document owner can delete an existing visit document.
     * @deny create: Attempt to create a document where the `id` field does not match the `visitId` path parameter.
     * @deny update: Attempt to update a document by a user who is not the owner.
     * @deny delete: Attempt to delete a document by a user who is not the owner or if the document does not exist.
     * @principle Enforces document ownership for writes, public read access.
     */
    match /visits/{visitId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && resource.data.id == visitId;
      allow delete: if request.auth != null && resource.data.id == visitId && resource != null;
    }
  }
}