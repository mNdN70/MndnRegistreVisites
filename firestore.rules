/**
 * @fileoverview Firestore Security Rules for the visit logging application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on a combination of public read access and owner-only write access.
 *
 * Data Structure:
 * The database consists of two top-level collections: `persons_to_visit` and `visits`.
 *
 * Key Security Decisions:
 * - The `persons_to_visit` collection is publicly readable, while writes are disallowed.
 * - The `visits` collection allows public reads but restricts writes to the owner. Ownership is determined by matching `request.auth.uid` against the `authorId` field within the document.
 * - No user listing is allowed.
 *
 * Denormalization for Authorization:
 * The `visits` collection relies on an `authorId` field to determine ownership for write operations. This avoids the need for complex `get()` calls to other collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to person to visit information. Writes are disallowed.
     * @path /persons_to_visit/{personToVisitId}
     * @allow get, list: Any user can read person to visit details.
     * @deny create, update, delete: No user can create, update, or delete person to visit details.
     * @principle Public read access, no write access.
     */
    match /persons_to_visit/{personToVisitId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to visit records, but restricts write access to the owner.
     * @path /visits/{visitId}
     * @allow get, list: Any user can read visit records.
     * @deny create, update, delete: Writes are restricted to the document owner.
     * @principle Public read with owner-only writes.
     */
    match /visits/{visitId} {
      allow get, list: if true;
      allow create: if request.resource.data.visitorId == request.auth.uid;
      allow update: if isOwner(resource.data.visitorId);
      allow delete: if isOwner(resource.data.visitorId);
    }

    // Helper function to determine if the user is the owner of the document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}