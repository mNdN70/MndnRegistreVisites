/**
 * @fileoverview Firestore Security Rules for the visit logging application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on a combination of public read access, ownership and relational validation.
 *
 * Data Structure:
 * - /persons_to_visit/{personToVisitId}: Stores information about company employees who can be visited.
 * - /visits/{visitId}: Stores visit records.
 *
 * Key Security Decisions:
 * - `persons_to_visit` is publicly readable but not writable via the client.
 * - `visits` are publicly readable, with owner-only writes.  The `Visit` entity requires an `authorId` or `ownerId` field to properly secure write operations.
 * - The rules do NOT enforce the data types or presence of non-authorization fields.
 *
 * Denormalization for Authorization:
 *  - The rules assume that the `Visit` entity will contain an `authorId` or `ownerId` field indicating the user who created the visit. This is crucial for implementing owner-only write access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to the `persons_to_visit` collection, but prevents client-side writes.
     * @path /persons_to_visit/{personToVisitId}
     * @allow get, list: Always allows read access.
     * @deny create, update, delete: Always denies write access.
     * @principle Allows public read access.
     */
    match /persons_to_visit/{personToVisitId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to the `visits` collection, but restricts writes to the owner of the visit.
     * @path /visits/{visitId}
     * @allow get, list: Always allows read access.
     * @deny create, update, delete: Denies write access if the user is not the owner, or if the `Visit` entity is missing an `authorId` or `ownerId` field.
     * @principle Allows public read access with owner-only writes based on an `authorId` or `ownerId` field in the `Visit` entity.
     */
    match /visits/{visitId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

        /**
     * @description Allows anyone to create a department
     * @path /departments/{departmentId}
     * @allow get, list: Always allows read access.
     * @allow create: Always allows create access.
     * @deny update, delete: Always denies update and delete access.
     * @principle Allows public read and create access.
     */
    match /departments/{departmentId} {
        allow get, list: if true;
        allow create: if true;
        allow update, delete: if false;
    }
  }
}