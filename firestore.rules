/**
 * @fileOverview Firestore Security Rules for the visit logging application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on a combination of factors:
 *  - Granular permissions for `create`, `read`, `update`, and `delete` operations.
 *  - Ownership-based access control for user-specific data.
 *
 * Data Structure:
 * The Firestore database is structured with the following top-level collections:
 *  - `/persons_to_visit/{personToVisitId}`: Stores information about company employees who can receive visitors.
 *  - `/visits/{visitId}`: Stores records of visits, including visitor details and timestamps.
 *
 * Key Security Decisions:
 *  - All write operations require authentication.
 *  - Read access to `persons_to_visit` is public.
 *  - Read and Write access to `visits` is denied for all users, unless implemented (TODO).
 *
 * Denormalization for Authorization:
 *  - The rules leverage the structure of the data to avoid costly `get()` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for the `/persons_to_visit/{personToVisitId}` collection. Allows read for all users. Writes are denied.
     * @path /persons_to_visit/{personToVisitId}
     * @allow (get, list) Any user can read data about people to visit.
     * @deny (create, update, delete) No user can create, update, or delete people to visit through client-side rules.
     * @principle Public read, no writes allowed.
     */
    match /persons_to_visit/{personToVisitId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the `/visits/{visitId}` collection. Denies all read and write operations.
     * @path /visits/{visitId}
     * @allow None.
     * @deny (create, get, list, update, delete) All operations are denied, as rules are unimplemented
     * @principle Explicitly denies all access.
     */
    match /visits/{visitId} {
        allow get, list: if false;
        allow create, update, delete: if false; // TODO: Implement visit write rule
    }
  }
}