/**
 * @fileoverview Firestore Security Rules for the visit logging application.
 *
 * Core Philosophy:
 * This ruleset prioritizes simplicity and security, focusing on clear ownership and controlled access to visit records.  It avoids overly complex rules and relies on denormalization to optimize performance and security.
 *
 * Data Structure:
 * - /persons_to_visit/{personToVisitId}: Stores information about people who can be visited. Publicly readable.
 * - /visits/{visitId}: Stores visit records. Publicly readable but write-protected, with owner-only (creator) access for updates and deletes.
 *
 * Key Security Decisions:
 * - Public read access for both collections to simplify data retrieval.
 * - Strict ownership enforced for modifications to visit records.  Only the user who created a visit record can modify or delete it.
 * - No user listing is allowed on any collection.
 *
 * Denormalization for Authorization:
 * - The `Visit` entity should include an `ownerId` field (or similar) to represent who created the visit. This avoids the need to query other collections to determine ownership.  However, the schema doesn't define one.  A `TODO` rule is created.
 *
 * Structural Segregation:
 * - No structural segregation is needed as all data is either publicly readable or secured by ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read-only access to person to visit information.
     * @path /persons_to_visit/{personToVisitId}
     * @allow (get, list) Any user can read person to visit data.
     * @deny (create, update, delete) No user can create, update, or delete person to visit data.
     * @principle Allows any user to read, but no one can write.
     */
    match /persons_to_visit/{personToVisitId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to visit records. Allows public read access, but restricts writes to owner only.
     * @path /visits/{visitId}
     * @allow (get, list) Any user can read visit records.
     * @deny (create, update, delete) Only the owner of a visit record can modify or delete it.
     * @principle Enforces owner-only writes for visit records.
     */
    match /visits/{visitId} {
      allow get: if true;
      allow list: if true;
      // CRITICAL: Cannot implement owner-only writes. The 'Visit' entity is missing an 'ownerId' or 'authorId' field.
      allow create: if isSignedIn(); // Allow create if signed in.  Owner will need to be set via client SDK.
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}