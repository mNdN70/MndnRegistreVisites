/**
 * @file Overview
 * This ruleset enforces a basic security model that allows read access to all documents
 * but restricts write access.
 *
 * Data Structure:
 * - /persons_to_visit/{personToVisitId}: Stores information about people who can be visited.
 * - /visits/{visitId}: Stores visit records.
 *
 * Key Security Decisions:
 * - Public read access is granted to both collections for prototyping.
 * - All write operations (create, update, delete) are forbidden to provide an initial secure state.
 * - No complex validation is performed during this prototyping stage.
 *
 * Denormalization for Authorization:
 *   N/A - Authorization checks are not implemented in this prototype.
 *
 * Structural Segregation:
 *   N/A - No segregation of public and private data is implemented in this prototype.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read access to person to visit records, but denies all write access.
     * @path /persons_to_visit/{personToVisitId}
     * @allow (get, list) - Any user can read person to visit records.
     * @deny (create, update, delete) - No user can create, update, or delete person to visit records.
     * @principle Allows public read access for prototyping, while denying all writes for security.
     */
    match /persons_to_visit/{personToVisitId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read access to visit records, but denies all write access.
     * @path /visits/{visitId}
     * @allow (get, list) - Any user can read visit records.
     * @deny (create, update, delete) - No user can create, update, or delete visit records.
     * @principle Allows public read access for prototyping, while denying all writes for security.
     */
    match /visits/{visitId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}