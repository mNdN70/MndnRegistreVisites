/**
 * @file Firebase Security Rules for Visit Logging Application
 *
 * @corePhilosophy This ruleset enforces a role-based access control model for managing people to visit and logging their visits.
 *
 * @dataStructure
 *  - /persons_to_visit/{personToVisitId}: Stores information about people who can be visited.
 *  - /visits/{visitId}: Stores visit records with details like visitor information, timestamps, and the person being visited.
 *
 * @keySecurityDecisions
 *  - `persons_to_visit` collection is intended to store employee data and has open read access.
 *  - `visits` collection stores visit records and restrict writes.
 *  - Access to `visits` collection is restricted to signed-in users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for the /persons_to_visit collection.  Allows anyone to read employee information.
     * @path /persons_to_visit/{personToVisitId}
     * @allow get, list: Any user can read the person to visit.
     * @principle Public read access for employee data.
     */
    match /persons_to_visit/{personToVisitId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /visits collection. Only signed-in users can create, update, or delete visits.
     * @path /visits/{visitId}
     * @allow create: Any signed-in user can create a visit.
     * @allow update, delete: No one has permissions to update or delete
     * @principle Restrict access to signed-in users.
     */
    match /visits/{visitId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    // --- Helper Functions ---
    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}