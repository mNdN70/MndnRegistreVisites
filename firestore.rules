/**
 * @file Overview
 * This ruleset enforces a basic security model where any authenticated user can read all data,
 * but write access is completely forbidden for all collections in the database.
 * This configuration prioritizes data visibility during the prototyping phase and prevents unauthorized modifications.
 *
 * @dataStructure
 * - /persons_to_visit/{personToVisitId}: Stores information about people who can be visited.
 * - /visits/{visitId}: Stores visit records.
 *
 * @keySecurityDecisions
 * - Read access (get, list) is open to all authenticated users.
 * - Write access (create, update, delete) is explicitly denied for all users.
 * - This ruleset does NOT currently enforce any schema validation or complex authorization logic.
 * - This configuration is intended for rapid prototyping and requires refinement for production use.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows any authenticated user to read information about people to visit, but prevents any writes.
     * @path /persons_to_visit/{personToVisitId}
     * @allow (get, list) If the user is signed in, they can read the person's information.
     * @deny (create, update, delete) No one can create, update, or delete person information.
     * @principle Read access is open for prototyping; write access is denied to prevent unauthorized changes.
     */
    match /persons_to_visit/{personToVisitId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Allows any authenticated user to read visit records, but prevents any writes.
     * @path /visits/{visitId}
     * @allow (get, list) If the user is signed in, they can read the visit record.
     * @deny (create, update, delete) No one can create, update, or delete visit records.
     * @principle Read access is open for prototyping; write access is denied to prevent unauthorized changes.
     */
    match /visits/{visitId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Allows no access at /employees/{employeeId}
     * @path /employees/{employeeId}
     * @allow NONE
     * @deny ANY
     * @principle Read and write access is denied to prevent unauthorized changes.
     */
    match /employees/{employeeId} {
      allow get, list: if false;
      allow create, update, delete: if false;
    }
  }

  // Helper function to determine if a user is signed in
  function isSignedIn() {
    return request.auth != null;
  }
}