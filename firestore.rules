/**
 * @file Overview
 * This ruleset enforces a basic, unrestrictive security model focused on data isolation and simple access controls.
 *
 * @dataStructure
 * The database consists of two top-level collections:
 * - `/persons_to_visit/{personToVisitId}`: Stores information about people who can be visited.
 * - `/visits/{visitId}`: Stores individual visit records.
 *
 * @keySecurityDecisions
 * - List operations for `/employees` are denied due to the error report and unaddressed security implications.
 * - In this prototype, write access to all collections is open to any authenticated user.
 * - All data validation is disabled for rapid prototyping, focusing solely on authorization.
 *
 * @denormalizationForAuthorization N/A (Simple data model, no complex relationships yet)
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Determines if the request is being made by the owner of the data.
     * @param {string} userId The user ID to check against the request's auth UID.
     * @return {bool} True if the user ID matches the request's auth UID, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Determines if the request is being made by the owner of the data and the resource exists.
     * @param {string} userId The user ID to check against the request's auth UID.
     * @return {bool} True if the user ID matches the request's auth UID and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource.data);
    }

    /**
     * @description Enforces that a value cannot be changed after creation.
     * @param {any} originalValue The value of the field in the existing document.
     * @param {any} newValue The new value being proposed in the update.
     * @return {bool} True if the values are equal (no change), false otherwise.
     */
    function isImmutable(originalValue, newValue) {
      return originalValue == newValue;
    }

    /**
     * @description
     * Applies to documents in the /persons_to_visit collection.
     * This ruleset allows any authenticated user to read and write person to visit data.
     *
     * @path /persons_to_visit/{personToVisitId}
     * @allow (get) Signed-in user can read a person to visit's data.
     * @allow (create) Signed-in user can create a person to visit.
     * @deny (delete) No one can delete a person to visit.
     * @principle Allows all authenticated users to read and write person to visit data, with no ownership checks.
     */
    match /persons_to_visit/{personToVisitId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description
     * Applies to documents in the /visits collection.
     * This ruleset allows any authenticated user to create, read, update, and delete visit records.
     *
     * @path /visits/{visitId}
     * @allow (get) Signed-in user can read a visit record.
     * @allow (create) Signed-in user can create a new visit record.
     * @deny (delete) No one can delete a visit record.
     * @principle Allows all authenticated users to read and write visit records, with no ownership checks.
     */
    match /visits/{visitId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description
     * Denies listing of employees.
     * The error report indicates a permissions issue when listing employees.  Since there is no
     * information about how the `employees` collection is intended to be secured, the listing operation
     * is explicitly denied.  This forces the developer to revisit the security model and define appropriate
     * access rules.
     *
     * @path /employees
     * @deny (list) No one can list employees
     * @principle Security First - Explicitly deny access when the appropriate access control is not clear
     */
    match /employees {
       allow list: if false;
      match /{employeeId} {
        allow get: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
      }
    }
  }
}