/**
 * @file Firebase Security Rules for Firestore.
 * @description This ruleset enforces a basic security model where all users can read all data, but only authenticated users can create, update, or delete data. It avoids complex nested reads for authorization and focuses on flat data structures.
 *
 * Data Structure:
 * - /persons_to_visit/{personToVisitId}: Stores information about people who can be visited.
 * - /visits/{visitId}: Stores visit records.
 *
 * Key Security Decisions:
 * - Read permissions are generally open to all users.
 * - Write permissions require authentication (user must be signed in).
 * - Does not implement any ownership or role based security.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read the list of persons to visit, but only authenticated users can create, update or delete persons to visit.
     * @path /persons_to_visit/{personToVisitId}
     * @allow (get, list) - Anyone can read the list of persons to visit.
     * @allow (create, update, delete) - Authenticated users can create, update or delete persons to visit.
     * @deny (create, update, delete) - Unauthenticated users cannot create, update or delete persons to visit.
     * @principle Allows reads by anyone, but protect write operations for only autheticated users.
     */
    match /persons_to_visit/{personToVisitId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to read the list of visits, but only authenticated users can create, update or delete visits.
     * @path /visits/{visitId}
     * @allow (get, list) - Anyone can read the list of visits.
     * @allow (create, update, delete) - Authenticated users can create, update or delete visits.
     * @deny (create, update, delete) - Unauthenticated users cannot create, update or delete visits.
     * @principle Allows reads by anyone, but protect write operations for only autheticated users.
     */
    match /visits/{visitId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Denies all access to the /departments collection
     * @path /departments/{departmentId}
     * @allow (get) - Not applicable
     * @allow (list) - Not applicable
     * @allow (create) - Not applicable
     * @allow (update) - Not applicable
     * @allow (delete) - Not applicable
     * @deny (get, list, create, update, delete) - No one can get, list, create, update or delete departments
     * @principle Ensures no access to the /departments collection without specific rules
     */
    match /departments/{departmentId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }
}