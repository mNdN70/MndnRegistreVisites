rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines if the current user is signed in
     * @return {boolean} True if the user is signed in
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines if the current user is the owner of the document
     * @param {string} userId - The user id to check against the request auth UID.
     * @return {boolean} True if the user id matches the request auth UID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Defines if the current user is the owner of the document and the document exists
     * @param {string} userId - The user id to check against the request auth UID.
     * @return {boolean} True if the user id matches the request auth UID and the document exists.
     */
    function isExistingOwner() {
        return isSignedIn() && resource.data.authorId == request.auth.uid;
    }

    /**
     * @description Rules for the /persons_to_visit collection.
     * @path /persons_to_visit/{personToVisitId}
     * @allow (get, list) User can read person to visit data.
     * @allow (create) User can create a new person to visit if authenticated.
     * @deny (update) User cannot update person to visit data if not authenticated.
     * @deny (delete) User cannot delete person to visit data if not authenticated.
     * @principle Public read, owner-only writes.
     */
    match /persons_to_visit/{personToVisitId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

    /**
     * @description Rules for the /visits collection.
     * @path /visits/{visitId}
     * @allow (get, list) User can read visit data.
     * @allow (create) User can create a new visit if authenticated and the ownerId matches their uid.
     * @deny (update) User cannot update visit data if not the owner.
     * @deny (delete) User cannot delete visit data if not the owner.
     * @principle Public read, owner-only writes with owner id validation.
     */
    match /visits/{visitId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }
  }
}