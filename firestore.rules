/**
 * @file Firestore Security Rules
 * @description This ruleset enforces authentication-based access control for a visit logging application.
 *
 * Core Philosophy:
 *   The ruleset prioritizes security by requiring authentication for all data modifications.
 *   It allows open read access to visit and person data while restricting write access to authenticated users.
 *
 * Data Structure:
 *   The database consists of two main collections: `persons_to_visit` and `visits`.
 *   - `/persons_to_visit/{personToVisitId}`: Stores information about people who can be visited.
 *   - `/visits/{visitId}`: Stores records of visits.
 *
 * Key Security Decisions:
 *   - Authenticated users can create, update and delete visits and persons_to_visit.
 *   - The rules do not enforce strict data validation, allowing for flexible data schemas during prototyping.
 *   - No user listing is explicitly denied, assuming it's not a critical security concern in this prototype.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants authenticated users create, read, update, and delete access to the persons_to_visit collection.
     * @path /persons_to_visit/{personToVisitId}
     * @allow (create) request.auth != null
     * @allow (get) true
     * @allow (update) request.auth != null
     * @allow (delete) request.auth != null
     * @deny (create) request.auth == null
     * @deny (update) request.auth == null
     * @deny (delete) request.auth == null
     * @principle Authenticated users can manage people to visit
     */
    match /persons_to_visit/{personToVisitId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource.data.id == personToVisitId;
      allow delete: if isSignedIn() && resource.data.id == personToVisitId && resource != null;
    }

    /**
     * @description Grants authenticated users create, read, update, and delete access to the visits collection.
     * @path /visits/{visitId}
     * @allow (create) request.auth != null
     * @allow (get) true
     * @allow (update) request.auth != null
     * @allow (delete) request.auth != null
     * @deny (create) request.auth == null
     * @deny (update) request.auth == null
     * @deny (delete) request.auth == null
     * @principle Authenticated users can manage visits.
     */
    match /visits/{visitId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource.data.id == visitId && resource != null;
      allow delete: if isSignedIn() && resource.data.id == visitId && resource != null;
    }

    function isSignedIn() {
        return request.auth != null;
    }

  }
}